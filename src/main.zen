// https://github.com/sipeed/kendryte-standalone-sdk/blob/cbcf157696ef8aa0d6220fe96eae5557087d873c/lib/bsp/include/platform.h
// https://s3.cn-north-1.amazonaws.com.cn/dl.kendryte.com/documents/kendryte_standalone_programming_guide_20190311144158_en.pdf

const Uart = @import("uart.zen").Uart;
const UART3_BASE_ADDR = @import("uart.zen").UART3_BASE_ADDR;
const builtin = @import("builtin");
export const abort: @TypeOf(_abort) align(4) = _abort;

export fn main(core_id: c_int) noreturn {
    if(core_id == 0) {
      const text = "Hello,world!\r\nあいうえお\r\n" ** 5;
      const uart = @intToPtr(*volatile Uart, UART3_BASE_ADDR);
      uart.init_uart3();
      uart.puts(text);
    }
    @trap();
}

export fn _abort() noreturn {
    @trap();
}

pub fn panic(msg: []const u8, stack_trace: ?*builtin.StackTrace) noreturn {
    @trap();
}

comptime {
    asm(
        \\.global _start;
        \\.extern main;
        \\.extern abort;
        \\.type _start, @function;
        \\_start:
        \\  lla  sp,stack
        \\  csrw mideleg, 0
        \\  csrw medeleg, 0
        \\  la   t0, abort
        \\  csrw mtvec, t0
        \\  li   t0, 0x00006000
        \\  csrs mstatus, t0
        \\  csrw mie, 0
        \\  csrw mip, 0
        \\  csrr a0, mhartid
        \\  j    main
        \\.section .bss
        \\.skip 1024
        \\stack:
    );
}
