// https://github.com/sipeed/kendryte-standalone-sdk/blob/cbcf157696ef8aa0d6220fe96eae5557087d873c/lib/bsp/include/platform.h
// https://github.com/sipeed/kendryte-standalone-sdk/blob/cbcf157696ef8aa0d6220fe96eae5557087d873c/lib/drivers/uarths.c
// http://kendryte-docs.s3-website.cn-north-1.amazonaws.com.cn/docs/standalone_programming_guide/en/UARTHS.html#api

const SysCtl = @import("sysctl.zen").SysCtl;
const SYSCTL_BASE_ADDR = @import("sysctl.zen").SYSCTL_BASE_ADDR;
const Fpioa = @import("fpioa.zen").Fpioa;
const FPIOA_BASE_ADDR = @import("fpioa.zen").FPIOA_BASE_ADDR;

pub const UART3_BASE_ADDR: usize = 0x50230000;

pub const Uart = extern struct {

    const Union1 = extern union {
        RBR: u32,
        DLL: u32,
        THR: u32,
    };
    union1: Union1,

    const Union2 = extern union {
        DLH: u32,
        IER: u32,
    };
    union2: Union2,

    const Union3 = extern union {
        FCR: u32,
        IIR: u32,
    };
    union3: Union3,

    LCR: u32,
    MCR: u32,
    LSR: u32,
    MSR: u32,
    SCR: u32,
    LPDLL: u32,
    LPDLH: u32,
    RSV0: u32,
    RSV1: u32,

    const Union4 = extern union {
        SRBR: [16]u32,
        STHR: [16]u32,
    };
    union4: Union4,

    FAR: u32,
    TFR: u32,
    RFW: u32,
    USR: u32,
    TFL: u32,
    RFL: u32,
    SRR: u32,
    SRTS: u32,
    SBCR: u32,
    SDMAM: u32,
    SFE: u32,
    SRT: u32,
    STET: u32,
    HTX: u32,
    DMASA: u32,
    TCR: u32,
    DE_EN: u32,
    RE_EN: u32,
    DET: u32,
    TAT: u32,
    DLF: u32,
    RAR: u32,
    TAR: u32,
    LCR_EXT: u32,
    RSV3: [9]u32,
    CPR: u32,
    UCV: u32,
    CTR: u32,

    const Self = @This();

    pub fn init_uart3(self: *volatile Self) void {
        const sys_ctl = @intToPtr(*volatile SysCtl, SYSCTL_BASE_ADDR);
        const fpioa = @intToPtr(*volatile Fpioa, FPIOA_BASE_ADDR);

        sys_ctl.enable_uart3_clock_bus();
        sys_ctl.enable_uart3_clock();

        const freq = sys_ctl.get_apb0_clock_freq();
        const divisor = freq / 115200;
        const dlh = divisor >> 12;
        const dll = (divisor - (dlh << 12)) / 16;
        const dlf = divisor - (dlh << 12) - dll * 16;
        self.LCR |= 1 << 7;
        self.union2.DLH = @intCast(u8, dlh);
        self.union1.DLL = @intCast(u8, dll);
        self.DLF = @intCast(u8, dlf);
        self.LCR = 0;
        self.LCR = 3;
        self.LCR &= 0xFFFFFF7F;
        self.union2.IER |= 0x80;
        self.union3.FCR = (0 << 6) | (3 << 4) | (1 << 3) | 1;
        self.SRT = 0;
        fpioa.enable_uart3();
        fpioa.init();
    }

    pub fn getc(self: *volatile Self) u8 {
        while((self.LSR & 1) == 0){}
        return @intCast(u8, self.union1.RBR & 0xff);
    }

    pub fn putc(self: *volatile Self, c: u8) void {
        while((self.LSR & (1 << 5)) != 0){}
        self.union1.THR = c;
    }

    pub fn puts(self: *volatile Self, str: []const u8) void {
        for (str) |c| {
            self.putc(c);
        }
    }
};
