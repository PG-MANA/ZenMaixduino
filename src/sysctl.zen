
pub const SYSCTL_BASE_ADDR: usize = 0x50440000;

pub const SysCtl = packed struct {
    const Self = @This();

    git_id: u32, //なんぞこれ
    clock_freq: u32,
    pll0_ctl: u32,
    pll1_ctl: u32,
    pll2_ctl: u32,
    reserved0: u32,
    pll_lock: u32,
    rom_error: u32,
    clk_sel0: u32,
    clk_sel1: u32,
    clk_en_cent: u32,
    clk_en_peri: u32,
    soft_reset: u32,
    peri_reset: u32,
    clk_th0: u32,
    clk_th1: u32,
    clk_th2: u32,
    clk_th3: u32,
    clk_th4: u32,
    clk_th5: u32,
    clk_th6: u32,
    misc: u32,
    peri: u32,
    spi_sleep: u32,
    reset_status: u32,
    dma_sel0: u32,
    dma_sel1: u32,
    power_sel: u32,

    pub fn enable_uart3_clock_bus(self: *volatile Self) void {
        // https://github.com/sipeed/kendryte-standalone-sdk/blob/Maixpy-dev/lib/drivers/sysctl.c より
        self.clk_en_cent |= (1 << 3);
    }

    pub fn enable_uart3_clock(self: *volatile Self) void {
        self.clk_en_peri |= (1 << 18);
    }

    pub fn enable_fpioa_clock(self: *volatile Self) void {
        self.clk_en_cent |= (1 << 3);
        self.clk_en_peri |= (1 << 20);
    }

    pub fn get_apb0_clock_freq(self: *volatile Self) u32 {
        const clock_select: u32 = self.clk_sel0 & 1;
        const source: u32 = switch(clock_select) {
            0 => 26000000,
            1 => clock: {
                const freq_in: f64 = 26000000;
                const nr: f64 = @intToFloat(f64, (self.pll0_ctl & 0x000F) >>  0) + 1;
                const nf: f64 = @intToFloat(f64, (self.pll0_ctl & 0x03F0) >>  4) + 1;
                const od: f64 = @intToFloat(f64, (self.pll0_ctl & 0x3C00) >> 10) + 1;
                const freq_pll0: u32 = @floatToInt(u32, freq_in / nr * nf / od);
                const aclk_divider_sel: u2 = @intCast(u2, (self.clk_sel0 >> 1) & 0x03);
                var divider_sel: u32 = 0;
                _ = @shlWithOverflow(u32, 2, aclk_divider_sel, &divider_sel);
                break: clock (freq_pll0 / divider_sel);
            },
            else => 0,
        };
        return source / (((self.clk_sel0 >> 3) & 7) + 1);
    }
};
